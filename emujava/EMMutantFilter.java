/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package emujava;

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

/**
 *
 * @author jBillu
 */
public class EMMutantFilter extends javax.swing.JFrame implements ItemListener {

    /**
     * Creates new form EMMutantFilter
     */
    public EMMutantFilter() {
        initComponents();
        
        JCheckBox[] mutantsBoxes = new JCheckBox[ EMConstants.TARGETS.size() ];
        int x = 10;
        int y = 50; 
        for( int i=0; i<EMConstants.TARGETS.size(); i++ ) {
            Target target = ( Target )EMConstants.TARGETS.get( i );
            mutantsBoxes[ i ] = new JCheckBox( target.getMutationOperator() + "-" + target.getMutantNumber(), true );
            mutantsBoxes[ i ].setBounds( x, y, 90, 22 );
            mutantsBoxes[ i ].addItemListener( this );
            EMMutantFilter.jPanel1.add( mutantsBoxes[ i ] );
            y += 25;
            if( y==500 ) {
                x += 90;
                y = 50;
            } //END if STATEMENT
        } //END for LOOP
        int size = x+50;
        this.setSize( size, 500 );

        try {
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
            x = ( (int )dim.getWidth() - size ) / 2;
            y = ( (int )dim.getHeight() - 510 ) / 2;
            this.setLocation( x, y );
        } catch( Exception except ) {
            except.printStackTrace();
        } //END try-catch BLOCK
    } //END EMMutantFilter() METHOD
    
    public void itemStateChanged( ItemEvent event ) {
        JCheckBox jcb = ( JCheckBox )event.getSource();
        String mutant = jcb.getText();
        String operator = "" + mutant.charAt( 0 ) + mutant.charAt( 1 ) + mutant.charAt( 2 );
        int number = Integer.parseInt( mutant.substring( 4 ) );
        
        if( jcb.isSelected() ) {
            Target target = new Target();
            target.setMutationOperator( operator );
            target.setMutantNumber( number );
            EMConstants.TARGETS.add( target );
        } else {
            for( int i=0; i<EMConstants.TARGETS.size(); i++ ) {
                Target target = ( Target )EMConstants.TARGETS.get( i );
                if( target.getMutationOperator().equals( operator ) && target.getMutantNumber()==number ) {
                    EMConstants.TARGETS.remove( i );
                    break;
                } //END if STATEMENT
            } //END for LOOP
        } //END if-else STATEMENT
    } //END itemStateChanged() METHOD

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mutant Filter");
        setBounds(new java.awt.Rectangle(0, 0, 400, 510));
        setFocusCycleRoot(false);
        setMinimumSize(new java.awt.Dimension(400, 510));
        setPreferredSize(new java.awt.Dimension(400, 510));

        jPanel1.setLayout(null);

        jLabel1.setText("Select Equivalent Mutants to be Filtered");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 10, 280, 20);

        jButton1.setText("OK");
        jButton1.setMaximumSize(new java.awt.Dimension(75, 30));
        jButton1.setMinimumSize(new java.awt.Dimension(75, 30));
        jButton1.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(300, 10, 75, 30);

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible( false );
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EMMutantFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EMMutantFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EMMutantFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EMMutantFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EMMutantFilter().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
